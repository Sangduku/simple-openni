ChangeLog - SimpleOpenNI
------------------------
http://code.google.com/p/simple-openni/

vx.xx status, mm/dd/yyyy

v0.20 alpha,
	New:
		- Updated code to use OpenNI v1.1.041, Nite v1.3.1.5
		- Added 64bit libraries
		- Tested the library with Processing 1.5.1
		- Added a check to verify installed licenses, some error reports on the list where caused, because the license
		  key was not proper installed, in this case there will be an error message.
		- Added Nite extensions XnVPushDetector/XnVSwipeDetector from David Buchman. Had to change it a bit, due to changes
		  of Nite in the current version, this functions where removed:
			SetSteadyMaxVelocity
			GetSteadyMaxVelocity
		- Ported some more NITE classes:
			- XnVSelectableSlider2D
			- XnVSelectableSlider1D
			- XnVWaveDetector
			- XnVSteadyDetector
			- XnVSlider1D
			- XnVSlider2D
			- XnVSlider3D
			- XnVMultipleHands
		- Changed some Nite files, because of deprecated methods
			-  XnVSessionManager: Initialize,SetGesture, SetQRGesture
		- Reorganized the sample folder structure and the names of the examples
		- Added FAQ, Screenshot section to the wiki
		- Updated install instructions on the wiki for linux
		- Added new example:
		  SimpleOpenNI_NITE_Slider2d	- Shows how to use 2D Sliders
		- Fixed a bug: If you play a redord, skeletons were not displayed

v0.18 alpha, 03/27/2011
	New:
		- Implemented multithreading support, the hole camera captureing will be made in an own thread. 
		  By default it will still run in single threaded mode, to enable multithreading, just use this line:
		  context = new SimpleOpenNI(this,SimpleOpenNI.RUN_MODE_MULTI_THREADED);
		  So the drawing thread of processing is less stessed(the examples work now well, even on my Intel Atom/Linux).
		  Not all functions can profit that much from multithreading, 'depthMapRealWorld' will still slow down the because
		  it copies w*h*Vector3d from c++ to java, which takes quite a will(30-40ms)
		  The hole implementation is not done, the callbacks of openNI are still from the other thread,
		  should be in the same thread as processing. For NITE this is already implemented.
		- Improved the performance in single threaded mode as well
		- Added new example:
		  SimpleOpenNI_DepthImage_Threaded - Show how to use multithreading

		  
v0.17 alpha, 03/23/2011
	New:
		- Improved the overall performance
		- The skeleton was not always synchronized with the depthImage, now this should be better


v0.16 alpha, 03/20/2011
	New:
		- Added NITE support, NITE is quite objectorientated so i couldn't simplify that much, i just ported 
		  most of the NITE classes to SimpleOpenNI. There are some NITE classes that use multiple inheritance, which
		  java doesn't support. In this case i implemented the basic functions that is needed(not all inheritated functions
		  are impemented)
		  NITE is not fully ported yet, with the next release it should be done
		- Implemented a callback method from c++ to java, mostly for NITE class callbacks. Turned out to be much more
		  work as expected, maybe there is a simpler way, but i didn't found anything on the web.
		- Added new example:
			SimpleOpenNI_NITE_Hands		- Shows how NITE works with multiple hands(to activate multiple hands, see explanation in the sourcecode)
			SimpleOpenNI_NITE_CircleCtrl- Shows circular control of NITE
		- Extended the java doc, now all classes will be visible with the document generator
		- Fixed a typing mistake in the SimpleOpenNI_UserScene3d example
			
v0.15 alpha, 03/xx/2011
	New:
		- Added several functions for the skeleton handling + functions to save and load the calibrations 
		  for skeletons, but this saves and loads only to memory, not to the disk, so it's just for one session. 
		  bool saveCalibrationDataSkeleton(int user,int slot)	- saves the calibration in ram
		  bool loadCalibrationDataSkeleton(int user,int slot)	- load the calibration from ram
		  void clearCalibrationDataSkeleton(int slot)			- clears the calibration data at this slot
		  bool isCalibrationDataSkeleton(int slot)				- check if the calibration data exists at this slot
		  void abortCalibrationSkeleton(int user)				- aborts the calibration (requestCalibrationSkeleton)
	  	  bool isCalibratingSkeleton(int user)					- check if its in the state of calibrating
		  void setSmoothingSkeleton(float factor)				- set the smoothing factor for the skeleton
		  
		  About save+load of calibration data, see further info on this thread:
		  http://groups.google.com/group/openni-dev/browse_thread/thread/f3def5f642802ec0/1bafdb1c8570bc70?lnk=gst&q=Save++Calibration#1bafdb1c8570bc70
		- Added a download for linux-x86, also splitt up the download for each version: Win/OSX/Linux
		- Extended the CMakeList.txt:
			- updated the instructions to build, now all builds(Win/OSX/Linux) works nearly the same
			- now there should be a messages if you didn't setup the environment variables(for linux)
			- added the nite headers
			- fixed a spelling bug, couldn't find smallcase openNI library(for linux)
		- Added Eigen(http://eigen.tuxfamily.org) for internal use. Eigen is a 3d Math Template Library.
	
v0.14 alpha, 03/11/2011
	New:
		- Added some functions for the scene analyser and user:
		int[] 	sceneMap()					-	returns the hole scene map
		int[] 	getUsersPixels(int user)	-	returns the sceneMap for a user(only if user is enabled)
		int		getNumberOfUsers()			-	returns current count of users
		boolean	getCoM(int user,PVector com)-	returns the center of mass for a user
		- Added new example:
			SimpleOpenNI_UserScene3d	
				Shows how to get scene data for users
		- Fixed a bug in 'convertRealWorldToProjective'

v0.13 alpha, 03/06/2011
	New:
		- Created an installer for osx, but just for testing purpose
		- Removed the dependency from the xml init.file, added function, the normal enable... functions
		  still work, they just use the default values:
			init(PApplet parent)
			enableDepth(int width,int height,int fps)
			enableRGB(int width,int height,int fps)
			enableIR(int width,int height,int fps)
			enableScene(int width,int height,int fps)
		  Not all width/height/fps combinations are possible, depends on the hardware!!!
		- Added record + save ability
			enableRecorder(int recordMedium,String filePath)
			addNodeToRecording(int nodeType,int compression)
			removeNodeFromRecording(int nodeType)
			openFileRecording(String filePath)
		  Still have to test how this works with the User/Hands/Gesture.
		- Added a function to get the orientation of a skeleton joint, the return value is in a 3*3 Matrix 
		  and the confidence of this joint
			float getJointOrientationSkeleton(int userId,int joint,PMatrix3D jointOrientation)
		  Updated SimpleOpenNI_User3d, now you also see the orientation of the joints
		- Added new Examples:
			SimpleOpenNI_RecorderPlay
			SimpleOpenNI_DepthImageXml
	Changes:
		- All older examples where changed, now they are not using any xml files
		
v0.12 alpha, 02/28/2011
	New:
		- Added handtracking
		  3 new callbacks: 
			onCreateHands(long nId, PVector pPosition, float fTime)
			onUpdateHands(long nId, PVector pPosition, float fTime)
			onDestroyHands(long nId, float fTime)
		- Added gesturetracking
		  2 new callbacks: 
			onRecognizeGesture(String strGesture, PVector idPosition, PVector endPosition)
			onProgressGesture(String strGesture, PVector position,float progress)
		- Export now the realworld depthMap, see the function depthMapRealWorld
		- Added functions to get the horizontal and the vertical field of view of the camera
		  hFieldOfView
		  vFieldOfView
		- Added new Examples: 
			SimpleOpenNI_DepthMap3d
			SimpleOpenNI_Hands3d
		- Added camera frustum drawing function 'drawCamFrustum'
		
	Changes:
		- Changed the names of the listed callbacks, just to have all over the same naming method
		  onUserNew 			-> onNewUser
		  onUserLost 			-> onLostUser
		  onCalibrationStarted 	-> onStartCalibration
		  onCalibrationEnded	-> onEndCalibration
		  onPoseStarted	 		-> onStartPose
		  onPoseEnded 			-> onEndPose
		- Updated several examples

		
v0.11 alpha, 02/22/2011
	- started the changeLog
v0.10 alpha
	-